; packaging settings
; compiler flags and related stuff
; there has to be a single-ized version of the renderer.h thing
; there has to also be a single-ized serpent.h serpent.c that gets shipped with the program
;   that's where the api comes from, the renderer will shovel in the sdom to serpent.c which will turn it
;   into a malluable tree structure thing with SDTHashtables and such, properties included
;   exposing an api to manipulate it, a pointer to it will be sent back to the renderer as soon
;   as it gets made and that way it can re-render live for any changes being made
;   ofc the original sdom needs to also be packed into the final executable directly using gcc
